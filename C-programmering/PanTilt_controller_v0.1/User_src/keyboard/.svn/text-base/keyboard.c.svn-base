/*****************************************************************************
* University of Southern Denmark
* Embedded C Programming (ECP)
*
* MODULENAME.: ecp.c
*
* PROJECT....: ECP
*
* DESCRIPTION: See module specification file (.h-file).
*
* Change Log:
******************************************************************************
* Date    Id    Change
* YYMMDD
* --------------------
* 050128  KA    Module created.
*
*****************************************************************************/

/***************************** Include files *******************************/
#include "FreeRTOS.h"
#include "Task.h"
#include "queue.h"
#include "semphr.h"
#include "inc\lm3s6965.h"
#include "inc\binary.h"
#include "inc\glob_def.h"
#include "inc\emp_type.h"
#include "..\application.h"
/*****************************    Defines    *******************************/

#define SEM_COMMON_PINS 1


//Port B masked bit-number defines
#define PB2   (1<<2)    // Bit 2
#define PB3   (1<<3)    // Bit 3
#define PB4   (1<<4)    // Bit 4

//Port D masked bit-number defines
#define PD2   4   // Bit 2
#define PD3   8   // Bit 3
#define PD4   16    // Bit 4
#define PD5   32    // Bit 5

//Matrix key pad defines x-posistions, left -> right
#define X1    PB2
#define X2    PB3
#define X3    PB4

//Matrix key pad defines y-posistions, top -> buttom
#define Y1    PD5
#define Y2    PD4
#define Y3    PD3
#define Y4    PD2

/*****************************   Constants   *******************************/

/*****************************   Variables   *******************************/

/*****************************   Functions   *******************************/

void key_port_init(void)
/*****************************************************************************
*   Function : See module specification (.h-file).
*****************************************************************************/
{
  INT32U dummy;
  // Enable the GPIO ports that is used for Matrix Keypad.
  SYSCTL_RCGC2_R |= ( SYSCTL_RCGC2_GPIOB | SYSCTL_RCGC2_GPIOD );

  // Do a dummy read to insert a few cycles after enabling the peripheral.
  dummy = SYSCTL_RCGC2_R;

  // Set the direction as input. 
  GPIO_PORTD_DIR_R &= ~( PD2 | PD3 | PD4 | PD5 ); 
    
  // Set the direction as output.  
  GPIO_PORTB_DIR_R |= ( PB2 | PB3 | PB4 ); 

  // Enable the GPIO pins for digital function.
  GPIO_PORTD_DEN_R |= ( PD2 | PD3 | PD4 | PD5 );
  GPIO_PORTB_DEN_R |= ( PB2 | PB3 | PB4 ); 
  
  // Enable internal pull-up.  
  GPIO_PORTB_PUR_R |= ( PB2 | PB3 | PB4 );
}

void select_x( INT8U x )
{
  switch( x )
  {
    case 1: 
      GPIO_PORTB_DATA_R |= X1;
      GPIO_PORTB_DATA_R &= ~X2;
      GPIO_PORTB_DATA_R &= ~X3;
      break;
    case 2: 
      GPIO_PORTB_DATA_R &= ~X1;
      GPIO_PORTB_DATA_R |= X2;
      GPIO_PORTB_DATA_R &= ~X3;
      break;
    case 3: 
      GPIO_PORTB_DATA_R &= ~X1;
      GPIO_PORTB_DATA_R &= ~X2;
      GPIO_PORTB_DATA_R |= X3;
      break;
  }
}


INT8U row( INT8U y )
{
  INT8U result = 0;

  switch( y )
  {
    case Y1: result = 1; break;
    case Y2: result = 2; break;
    case Y3: result = 3; break;
    case Y4: result = 4; break;
  }
  return( result );
}

INT8U key_catch(INT8U x, INT8U y )
{
  const INT8U matrix[3][4] = {{'1','4','7','*'},
                              {'2','5','8','0'},
                              {'3','6','9','#'}};
  
  return( matrix[x-1][y-1] );
  
}

void key_init(void)
/*****************************************************************************
*   Input    :
*   Output   :
*   Function :
******************************************************************************/
{
  key_port_init();
}

void keyboard_task(void *pvParameters)
/*****************************************************************************
*   Function : See module specification (.h-file).
*****************************************************************************/
{
  INT8U x = 1;
  INT8U y, key;
  static INT8U key_state = 0;
  
  key_init();
  
  while(1)
  {
  	switch( key_state )
    {
      case 0:
      	xSemaphoreTake(common_pins_mutex, portMAX_DELAY );
      	select_x( x );
        key_state = 1;
        break;
      case 1:
        y = GPIO_PORTD_DATA_R & 0x3C;
        xSemaphoreGive(common_pins_mutex);
        if( y )
        {
          y = row( y );
          key = key_catch( x, y );
          xQueueSend(input_queue, &key, 0);
          key_state = 2;
        }

      case 2:
      	xSemaphoreTake(common_pins_mutex, portMAX_DELAY );
      	select_x( x );
      	key_state = 3;
      	break;

      case 3:
      	y = GPIO_PORTD_DATA_R & 0x3C;
      	xSemaphoreGive(common_pins_mutex);
      	if( y )
 	      {
 	      	key_state = 2;
 	      }
      	else
      	{
      	  x++;
      	  if( x > 3 )
      	  {
      	  	x = 1;
      	  }
      	  key_state = 0;
      	}
        break;
    }
    vTaskDelay(10 / portTICK_RATE_MS);
  }
}

/****************************** End Of Module *******************************/



